diff --git a/AGENTS.md b/AGENTS.md
index 6213a0f..12ead48 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -3,7 +3,7 @@
 ## 开发原则
 - 内部实现不用考虑兼容，这是一个短平快的项目，一切都以最快迭代效率为准。
 - 对外接口（技能/工具）无需保持长期稳定；优先保证简洁优雅、语义清晰，并让 AI 易于调用。可以在迭代中随时调整接口，但需确保当前运行内的一致性，并保持注册表与提示文档严格同步（见“Registration gate”）。
-- 安全默认：禁止攻击玩家（除非明确指名玩家名并使用专用工具），禁止默认挖掘（除非显式传入 `dig:true`）。“停止/stop/cancel”应直接映射为 `reset{}`。
+- 安全默认：禁止攻击玩家（除非明确指名玩家名并使用专用工具），禁止默认挖掘（除非显式传入 `dig:true`）。
 - 不保留历史注释或占位：删除/重构后的逻辑不保留“已移除/TODO/临时”类注释或废弃接口说明，避免向上下文泄露过时信息。一切以当前最新代码和文档为准。
 
 ## 目录结构与组织
@@ -28,9 +28,6 @@
   - Increase AI reply size: `.ai budget maxtokens 512` and/or `.ai reply maxlen 240`.
 
 ## 热重载流程
-- Save atomically: prepare changes fully, then write them. Avoid partial/fragmented saves under `bot_impl/` (the watcher reloads on file events, debounce ≈120ms).
-- If generating files, write to a temp path and `rename` into `bot_impl/` to ensure the new version is complete when reloaded.
-- For large multi-file edits, apply changes outside `bot_impl/` and move them in at once, or stop the bot temporarily.
 - 重载闸门（默认启用）：为避免半成品被热重载，仓库默认启用闸门文件 `open_fire`，只有在触碰该文件后才会真正 reload。
   - 使用方式：先在 `bot_impl/` 完成所有修改；准备好后执行 `touch open_fire`，此时才会应用热重载。
   - 如需关闭闸门（恢复到改动即重载）：CLI `--reload-gate off` 或设置环境变量 `HOT_RELOAD_GATE=off`。
@@ -55,20 +52,6 @@ If you need one‑time “post‑spawn init”, extract a common function (e.g.
 - Names: `camelCase` for variables/functions, `SCREAMING_SNAKE_CASE` for constants, `kebab-case` filenames (e.g., `fire-watch.js`) or `index.js` for module roots.
 - Keep modules small and single‑purpose inside `bot_impl/`. No new deps without discussion.
 
-## 测试
-- No automated tests yet. Validate manually:
-  - Connect to a test server; confirm join logs, chat echo, greeting delays, and fire extinguishing.
-  - Toggle debug: `MC_DEBUG=0|1` and verify log volume.
-- If adding tests, prefer `jest` and place under `__tests__/` mirroring `bot_impl/` paths. Add `npm test` script.
-
-## 提交与 PR
-- Commits: present tense, concise scope. Examples: `feat(greet): add time-of-day salutation`, `fix(watcher): avoid duplicate reloads`.
-- PRs: include summary, rationale, screenshots/log snippets if UX/logging changes, and manual test steps (env vars used, server details redacted). Link related issues.
-
-## 安全与配置
-- Never commit credentials. Use environment variables locally or CI secrets.
-- Log output may include server info; sanitize before sharing. Avoid enabling verbose debug in production servers.
-
 ## 架构
 - Single bot process; `bot_impl` can maintain shared state across reloads via `activate()` return value. Clean up timers/listeners in `deactivate()`.
 
@@ -89,7 +72,6 @@ if (state.autoLookSuspended) { /* skip cosmetic look controls */ }
 - Prefer fully automatic skills. Skills must encapsulate perception → planning → action → recovery internally. They should not require the LLM to micro‑decide low‑level steps. If a behavior cannot be made fully automatic yet, do not expose it to AI at all.
 - Intent‑level interface. Expose only high‑level, goal‑oriented skills (e.g., `go`, `gather`, `craft`). Parameters use “目标描述 + 约束”，并带内置闭环与自我纠错。失败返回结构化事件（如 `missing_material`），但不依赖 AI 决策继续运行。
 - Registration gate. Only register completed skills with the runner and list them in prompts. Keep registry and prompts strictly in sync with what is truly implemented. Never leak WIP names to the model.
-- Hot‑reload safety. Because `bot_impl/` hot‑reloads on file events, save atomically and only after the feature is fully ready. For multi‑file work, prepare outside `bot_impl/` and move in at once. Never commit partial implementations.
 - Observation policy. Basic observer data (生命/饥饿/坐标/附近/背包摘要等) is included directly in AI context to reduce tool calls; richer detail is fetched via explicit tools only when needed, with stable schemas.
 - No special cases (接口). Prefer one generalized interface per capability instead of multiple variants. Example: use a single `toss{items:[{name|slot,count?},...]}` to handle single/multiple/slot‑based discards; avoid `toss_hand`/`toss_multi` style forks.
 - 工具应做通用化设计：例如玩家观察统一使用 `observe_players{names?, world?|dim?}` 来兼容单人/多人/按维度查询；不保留旧别名，接口即最新且唯一。
@@ -97,10 +79,6 @@ if (state.autoLookSuspended) { /* skip cosmetic look controls */ }
   - 明确例外：玩家定位与信息查询一律通过外部AI 触发 `observe_players{...}`（或 `observe_detail{...}` 等查询工具），不要添加任何基于正则/关键词的本地快捷匹配（即便是“<名字> 在哪里/坐标/位置”这类）。这样可利用AI对拼写/别名/上下文的强纠错能力。
   - 允许的本地硬性保护/快捷处理仅限安全相关（如 `reset{}`、`dismount{}` 的强制停止），且应尽量简单、可证明安全。
 
-### 外部数据源与配置
-- 需要依赖外部服务的工具必须通过环境变量配置，不要在代码里写死默认值。
-  - 例如玩家观察工具 `observe_players{...}` 依赖地图接口，使用 `MAP_API_URL` 指定（无默认）。未配置时应返回结构化失败，不得静默退化或硬编码回退URL。
-
 ### 现有工具面（AI 使用）
 - 查询类：`observe_detail{what,radius?,max?}`；优先直接回答上下文，禁止为查询调用修改世界的工具。
 - 玩家观察：`observe_players{names?, world?|dim?, armor_(lt|lte|gt|gte|eq)?, health_(lt|lte|gt|gte|eq)?, max?}`。支持单人/多人/按维度筛选，以及生命/盔甲阈值过滤（如 `armor_eq:0` 或 `armor_lte:10`）。
